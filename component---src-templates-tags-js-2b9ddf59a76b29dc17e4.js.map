{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./src/components/slugify.js","webpack:///./src/components/Blog/BlogCard.js","webpack:///./src/components/common/SplitLayout.js","webpack:///./src/components/Blog/Tags.js","webpack:///./src/hooks/useRandomBlogPost.js","webpack:///./src/components/Blog/BlogLayout.js"],"names":["TagsPage","_ref","data","tag","pageContext","_data$allMarkdownRema","allMarkdownRemark","edges","totalCount","tagHeader","React","createElement","Layout","SEO","title","BlogLayout","map","_ref2","node","slug","fields","_node$frontmatter","frontmatter","date","tags","BlogCard","key","id","readtime","timeToRead","excerpt","module","exports","str","match","x","toLowerCase","join","PostWrapper","styled","article","withConfig","displayName","componentId","p","theme","dark","accentColor","primaryColor","shadowSmall","secondaryColor","BlogDateAndReadTime","style","fontSize","color","aria-label","FontAwesomeIcon","icon","Link","to","marginTop","TagBreadcrumb","slugify","SplitLayoutWrapper","section","spacing","sectionBottom","props","media","fablet","SplitLayout","content","aside","className","Tags","useStaticQuery","overflow","group","fieldValue","randomGenerator","min","max","Math","floor","random","useRandomBlogPost","blogposts","randomPost","window","location","pathname","randomSlug","randomTitle","children","sharerSection","_useRandomBlogPost","Fragment"],"mappings":"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","file":"component---src-templates-tags-js-2b9ddf59a76b29dc17e4.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\";\n\n\nimport SEO from \"#components/seo\";\nimport Layout from \"#components/Layout/Layout\"\nimport BlogCard from \"#components/Blog/BlogCard\";\nimport BlogLayout from \"#components/Blog/BlogLayout\";\n\nconst TagsPage = ({ data, pageContext }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n\n  const tagHeader = `${totalCount} post${totalCount === 1 ? \"\" : \"s\"} tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <SEO title={tagHeader + ' | Baptiste Monpezat'} />\n\n      <BlogLayout>\n        <h1>{tagHeader}</h1>\n        <br />\n        <br />\n        {\n          edges.map(({ node }) => {\n            const { slug } = node.fields;\n            const { title, date, tags } = node.frontmatter;\n            return (\n              <BlogCard\n                tags={tags}\n                key={node.id}\n                slug={slug}\n                title={title}\n                date={date}\n                readtime={node.timeToRead}\n                excerpt={node.excerpt}\n              />\n            )\n          })\n        }\n      </BlogLayout>\n    </Layout>\n  )\n}\nexport default TagsPage;\n\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            tags\n            title\n            date(formatString: \"MMMM DD, YYYY\", locale: \"en\")\n          }\n        }\n      }\n    }\n  }\n`","const slugify = str =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map(x => x.toLowerCase())\n    .join('-');\n\nmodule.exports = slugify\n","import React from \"react\";\nimport PropTypes from \"prop-types\"\n\nimport Link from \"gatsby-link\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nimport { TagBreadcrumb } from './Tags';\nimport slugify from '#components/slugify';\n\nconst PostWrapper = styled.article`\n  overflow: auto;\n  margin-bottom: 70px;\n  /* margin-top: 100px; */\n  padding: 30px 30px;\n  border-top: 5px solid ${p => p.theme.dark ? p.theme.accentColor : p.theme.primaryColor};\n  border-radius: 10px;\n  box-shadow: ${p => p.theme.shadowSmall}; \n  background-color: ${p => p.theme.secondaryColor};\n\n  &:hover {\n    box-shadow: 0 5px 10px rgba(0,0,0,0.1);\n  }\n\n  span {\n    font-size: 13px;\n    color: gray;\n  }\n`\n\nexport const BlogDateAndReadTime = ({ date, readtime }) => (\n  <span style={{ fontSize: 13, color: \"gray\" }}>\n    <span aria-label={`publish date ${date}`}><FontAwesomeIcon color=\"gray\" icon=\"calendar-alt\" />&nbsp;&nbsp;{date}</span>\n    &nbsp;&nbsp;&nbsp;\n    <span aria-label={`${readtime} minutes read`}>\n      <FontAwesomeIcon color=\"gray\" icon=\"clock\" />&nbsp;&nbsp;{readtime}min read\n    </span>\n  </span>\n)\n\nconst BlogCard = ({ date, readtime, title, excerpt, slug, tags }) => {\n  return (\n    <Link to={slug} aria-label={`${title} - read time ${readtime} minutes`}>\n      <PostWrapper>\n        <BlogDateAndReadTime date={date} readtime={readtime} />\n\n        <h2>{title}</h2>\n        <p>{excerpt}</p>\n\n        <div style={{ marginTop: 20 }}>\n          {tags.map(tag => (\n            <TagBreadcrumb key={tag} aria-label={`${tag} tag`} to={`/blog/tags/${slugify(tag)}/`}>\n              {tag}\n            </TagBreadcrumb>\n          ))}\n        </div>\n      </PostWrapper>\n    </Link>\n  );\n}\n\n\nBlogDateAndReadTime.propTypes = {\n  date: PropTypes.string.isRequired,\n  readtime: PropTypes.number.isRequired\n}\n\nBlogCard.propTypes = {\n  date: PropTypes.string.isRequired,\n  readtime: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n  tags: PropTypes.array.isRequired,\n}\nexport default BlogCard;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nconst SplitLayoutWrapper = styled.section`\n  ${p => p.theme.spacing.sectionBottom};\n\n  & article:first-of-type {\n    margin-top: 15px;\n  }\n\n  display: grid;\n  grid-template-columns: minmax(750px, 1fr) 1fr;\n  grid-column-gap: 30px;\n  grid-template-areas: \"post side\";\n\n  .layout__content {\n    grid-area: post;\n  }\n  .layout__aside {\n    grid-area: side;\n  }\n\n  @media ${props => props.theme.media.fablet} {\n    /* setting g-t-c to 1fr 1fr because in mobile \n    version minmax was breaking the layout */\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 0px;\n    grid-row-gap: 30px;\n    grid-template-areas: \n    \"post post\"\n    \"side side\";\n  }\n\n  .sticky__aside {\n    position: sticky;\n    top: 100px;\n  }\n`\n\nconst SplitLayout = ({ content, aside }) => (\n  <SplitLayoutWrapper>\n    <section className=\"layout__content\">\n      {content && content}\n    </section>\n    <section className=\"layout__aside\">\n      <aside className=\"sticky__aside\">\n        {\n          aside && aside\n        }\n      </aside>\n    </section>\n  </SplitLayoutWrapper>\n)\n\nSplitLayout.propTypes = {\n  content: PropTypes.node.isRequired,\n  aside: PropTypes.node.isRequired,\n}\n\nexport default SplitLayout;","import React from \"react\";\nimport styled from 'styled-components';\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\nimport slugify from '#components/slugify'\n\nexport const useTags = () => {\n  const tags = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(limit: 2000) {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  return tags;\n}\n\nexport const TagBreadcrumb = styled(Link)`\n  float: left;\n  border: 1px solid ${p => p.theme.dark ? p.theme.primaryColor : '#d9e0ff'};\n  border-radius: 50px;\n  padding: 8px 13px;\n  line-height: 10px;\n  margin: 5px;\n  font-size: 12px;\n\n  &:hover {\n    background: ${p => p.theme.dark ? p.theme.primaryColor : '#d9e0ff'};\n    color: ${p => p.theme.dark ? '#d9e0ff' : '#6D83F2'};\n  }\n`\n\nconst Tags = () => {\n  const tags = useTags();\n\n  return (\n    <section style={{ overflow: 'auto' }}>\n      {tags.allMarkdownRemark.group.map(tag => (\n        <TagBreadcrumb\n          key={tag.fieldValue}\n          to={`/blog/tags/${slugify(tag.fieldValue)}/`}\n          aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\n        >\n          {tag.fieldValue}, {tag.totalCount}\n        </TagBreadcrumb>\n      ))}\n    </section>\n  );\n}\n\nexport default Tags","import { useStaticQuery, graphql } from 'gatsby';\n\nexport const randomGenerator = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nconst useRandomBlogPost = () => {\n  const blogposts = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(filter: {fields: {posttype: {eq: \"blog\"}}}){\n          edges {\n            node {\n              frontmatter {\n                title\n              }\n              fields {\n                slug\n              }\n            }\n          }\n          totalCount\n        }\n      }\n    `\n  )\n\n  let randomPost = blogposts.allMarkdownRemark.edges[\n    randomGenerator(\n      0,\n      blogposts.allMarkdownRemark.totalCount - 1\n    )\n  ];\n\n  // make sure we don't have redundant randomPost \n  if (typeof window !== 'undefined') {\n    while (randomPost.node.fields.slug === window.location.pathname) {\n      randomPost = blogposts.allMarkdownRemark.edges[\n        randomGenerator(\n          0,\n          blogposts.allMarkdownRemark.totalCount - 1\n        )\n      ];\n      // don't wanna run it second time \n      break;\n    }\n  }\n\n  return { randomSlug: randomPost.node.fields.slug, randomTitle: randomPost.node.frontmatter.title };\n}\nexport default useRandomBlogPost;\n","import React from \"react\";\n\nimport PropTypes from 'prop-types';\nimport Link from 'gatsby-link';\n\nimport Tags from '#components/Blog/Tags';\nimport SplitLayout from \"#common/SplitLayout\";\nimport useRandomBlogPost from \"#src/hooks/useRandomBlogPost\";\n\n\nconst BlogLayout = ({ children, sharerSection }) => {\n  const { randomSlug, randomTitle } = useRandomBlogPost();\n\n  return (\n    <SplitLayout\n      content={children}\n      aside={\n        <>\n          <section>\n            <h4>Random post</h4>\n            <Link\n              style={{ fontSize: '16px' }}\n              to={randomSlug}\n            >\n              {randomTitle}\n            </Link>\n            <br /><br />\n          </section>\n          <section>\n            <h4>Tags</h4>\n            <Tags />\n            <br />\n          </section>\n          {sharerSection && sharerSection}\n        </>\n      }\n    />\n  )\n}\n\n\nBlogLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  sharerSection: PropTypes.node\n}\n\nexport default BlogLayout\n"],"sourceRoot":""}