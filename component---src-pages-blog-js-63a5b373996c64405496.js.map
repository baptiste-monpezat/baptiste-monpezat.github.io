{"version":3,"sources":["webpack:///./src/components/slugify.js","webpack:///./src/components/Blog/BlogCard.js","webpack:///./src/components/common/SplitLayout.js","webpack:///./src/components/Blog/Tags.js","webpack:///./src/hooks/useRandomBlogPost.js","webpack:///./src/components/Blog/BlogLayout.js","webpack:///./src/pages/blog.js"],"names":["module","exports","str","match","map","x","toLowerCase","join","PostWrapper","styled","article","withConfig","displayName","componentId","p","theme","dark","accentColor","primaryColor","shadowSmall","secondaryColor","BlogDateAndReadTime","_ref","date","readtime","React","createElement","style","fontSize","color","aria-label","FontAwesomeIcon","icon","BlogCard","_ref2","title","excerpt","slug","tags","Link","to","marginTop","tag","TagBreadcrumb","key","slugify","SplitLayoutWrapper","section","spacing","sectionBottom","props","media","fablet","SplitLayout","content","aside","className","Tags","useStaticQuery","overflow","allMarkdownRemark","group","fieldValue","totalCount","randomGenerator","min","max","Math","floor","random","useRandomBlogPost","blogposts","randomPost","edges","window","node","fields","location","pathname","randomSlug","randomTitle","frontmatter","BlogLayout","children","sharerSection","_useRandomBlogPost","Fragment","BlogPage","Layout","SEO","id","timeToRead"],"mappings":"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","file":"component---src-pages-blog-js-63a5b373996c64405496.js","sourcesContent":["const slugify = str =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map(x => x.toLowerCase())\n    .join('-');\n\nmodule.exports = slugify\n","import React from \"react\";\nimport PropTypes from \"prop-types\"\n\nimport Link from \"gatsby-link\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nimport { TagBreadcrumb } from './Tags';\nimport slugify from '#components/slugify';\n\nconst PostWrapper = styled.article`\n  overflow: auto;\n  margin-bottom: 70px;\n  /* margin-top: 100px; */\n  padding: 30px 30px;\n  border-top: 5px solid ${p => p.theme.dark ? p.theme.accentColor : p.theme.primaryColor};\n  border-radius: 10px;\n  box-shadow: ${p => p.theme.shadowSmall}; \n  background-color: ${p => p.theme.secondaryColor};\n\n  &:hover {\n    box-shadow: 0 5px 10px rgba(0,0,0,0.1);\n  }\n\n  span {\n    font-size: 13px;\n    color: gray;\n  }\n`\n\nexport const BlogDateAndReadTime = ({ date, readtime }) => (\n  <span style={{ fontSize: 13, color: \"gray\" }}>\n    <span aria-label={`publish date ${date}`}><FontAwesomeIcon color=\"gray\" icon=\"calendar-alt\" />&nbsp;&nbsp;{date}</span>\n    &nbsp;&nbsp;&nbsp;\n    <span aria-label={`${readtime} minutes read`}>\n      <FontAwesomeIcon color=\"gray\" icon=\"clock\" />&nbsp;&nbsp;{readtime}min read\n    </span>\n  </span>\n)\n\nconst BlogCard = ({ date, readtime, title, excerpt, slug, tags }) => {\n  return (\n    <Link to={slug} aria-label={`${title} - read time ${readtime} minutes`}>\n      <PostWrapper>\n        <BlogDateAndReadTime date={date} readtime={readtime} />\n\n        <h2>{title}</h2>\n        <p>{excerpt}</p>\n\n        <div style={{ marginTop: 20 }}>\n          {tags.map(tag => (\n            <TagBreadcrumb key={tag} aria-label={`${tag} tag`} to={`/blog/tags/${slugify(tag)}/`}>\n              {tag}\n            </TagBreadcrumb>\n          ))}\n        </div>\n      </PostWrapper>\n    </Link>\n  );\n}\n\n\nBlogDateAndReadTime.propTypes = {\n  date: PropTypes.string.isRequired,\n  readtime: PropTypes.number.isRequired\n}\n\nBlogCard.propTypes = {\n  date: PropTypes.string.isRequired,\n  readtime: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n  tags: PropTypes.array.isRequired,\n}\nexport default BlogCard;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nconst SplitLayoutWrapper = styled.section`\n  ${p => p.theme.spacing.sectionBottom};\n\n  & article:first-of-type {\n    margin-top: 15px;\n  }\n\n  display: grid;\n  grid-template-columns: minmax(750px, 1fr) 1fr;\n  grid-column-gap: 30px;\n  grid-template-areas: \"post side\";\n\n  .layout__content {\n    grid-area: post;\n  }\n  .layout__aside {\n    grid-area: side;\n  }\n\n  @media ${props => props.theme.media.fablet} {\n    /* setting g-t-c to 1fr 1fr because in mobile \n    version minmax was breaking the layout */\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 0px;\n    grid-row-gap: 30px;\n    grid-template-areas: \n    \"post post\"\n    \"side side\";\n  }\n\n  .sticky__aside {\n    position: sticky;\n    top: 100px;\n  }\n`\n\nconst SplitLayout = ({ content, aside }) => (\n  <SplitLayoutWrapper>\n    <section className=\"layout__content\">\n      {content && content}\n    </section>\n    <section className=\"layout__aside\">\n      <aside className=\"sticky__aside\">\n        {\n          aside && aside\n        }\n      </aside>\n    </section>\n  </SplitLayoutWrapper>\n)\n\nSplitLayout.propTypes = {\n  content: PropTypes.node.isRequired,\n  aside: PropTypes.node.isRequired,\n}\n\nexport default SplitLayout;","import React from \"react\";\nimport styled from 'styled-components';\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\nimport slugify from '#components/slugify'\n\nexport const useTags = () => {\n  const tags = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(limit: 2000) {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  return tags;\n}\n\nexport const TagBreadcrumb = styled(Link)`\n  float: left;\n  border: 1px solid ${p => p.theme.dark ? p.theme.primaryColor : '#d9e0ff'};\n  border-radius: 50px;\n  padding: 8px 13px;\n  line-height: 10px;\n  margin: 5px;\n  font-size: 12px;\n\n  &:hover {\n    background: ${p => p.theme.dark ? p.theme.primaryColor : '#d9e0ff'};\n    color: ${p => p.theme.dark ? '#d9e0ff' : '#6D83F2'};\n  }\n`\n\nconst Tags = () => {\n  const tags = useTags();\n\n  return (\n    <section style={{ overflow: 'auto' }}>\n      {tags.allMarkdownRemark.group.map(tag => (\n        <TagBreadcrumb\n          key={tag.fieldValue}\n          to={`/blog/tags/${slugify(tag.fieldValue)}/`}\n          aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\n        >\n          {tag.fieldValue}, {tag.totalCount}\n        </TagBreadcrumb>\n      ))}\n    </section>\n  );\n}\n\nexport default Tags","import { useStaticQuery, graphql } from 'gatsby';\n\nexport const randomGenerator = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nconst useRandomBlogPost = () => {\n  const blogposts = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(filter: {fields: {posttype: {eq: \"blog\"}}}){\n          edges {\n            node {\n              frontmatter {\n                title\n              }\n              fields {\n                slug\n              }\n            }\n          }\n          totalCount\n        }\n      }\n    `\n  )\n\n  let randomPost = blogposts.allMarkdownRemark.edges[\n    randomGenerator(\n      0,\n      blogposts.allMarkdownRemark.totalCount - 1\n    )\n  ];\n\n  // make sure we don't have redundant randomPost \n  if (typeof window !== 'undefined') {\n    while (randomPost.node.fields.slug === window.location.pathname) {\n      randomPost = blogposts.allMarkdownRemark.edges[\n        randomGenerator(\n          0,\n          blogposts.allMarkdownRemark.totalCount - 1\n        )\n      ];\n      // don't wanna run it second time \n      break;\n    }\n  }\n\n  return { randomSlug: randomPost.node.fields.slug, randomTitle: randomPost.node.frontmatter.title };\n}\nexport default useRandomBlogPost;\n","import React from \"react\";\n\nimport PropTypes from 'prop-types';\nimport Link from 'gatsby-link';\n\nimport Tags from '#components/Blog/Tags';\nimport SplitLayout from \"#common/SplitLayout\";\nimport useRandomBlogPost from \"#src/hooks/useRandomBlogPost\";\n\n\nconst BlogLayout = ({ children, sharerSection }) => {\n  const { randomSlug, randomTitle } = useRandomBlogPost();\n\n  return (\n    <SplitLayout\n      content={children}\n      aside={\n        <>\n          <section>\n            <h4>Random post</h4>\n            <Link\n              style={{ fontSize: '16px' }}\n              to={randomSlug}\n            >\n              {randomTitle}\n            </Link>\n            <br /><br />\n          </section>\n          <section>\n            <h4>Tags</h4>\n            <Tags />\n            <br />\n          </section>\n          {sharerSection && sharerSection}\n        </>\n      }\n    />\n  )\n}\n\n\nBlogLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  sharerSection: PropTypes.node\n}\n\nexport default BlogLayout\n","import React from \"react\";\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Layout from \"#components/Layout/Layout\"\nimport SEO from \"#components/seo\";\n\nimport BlogCard from '#components/Blog/BlogCard';\nimport BlogLayout from '#components/Blog/BlogLayout';\n\nconst BlogPage = () => {\n  const blogposts = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(\n          filter: {fields: {posttype: {eq: \"blog\"}}},\n          sort: {fields: frontmatter___date, order: DESC}\n        ){\n          edges {\n            node {\n              id\n              excerpt\n              timeToRead\n              frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\", locale: \"en\")\n                tags\n              }\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n  return (\n    <Layout>\n      <SEO title=\"Blog | Baptiste Monpezat\" />\n\n      <BlogLayout>\n        {\n          blogposts.allMarkdownRemark.edges.map(({ node }) => (\n            <BlogCard\n              key={node.id}\n              slug={node.fields.slug}\n              title={node.frontmatter.title}\n              date={node.frontmatter.date}\n              tags={node.frontmatter.tags}\n              readtime={node.timeToRead}\n              excerpt={node.excerpt}\n            />\n          ))\n        }\n      </BlogLayout>\n    </Layout>\n  )\n}\n\nexport default BlogPage\n"],"sourceRoot":""}